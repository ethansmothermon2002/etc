# ┏┓┓┏┏┓┳ ┓┓ ┃
#  ┃ ┃┃┃┃ ┃┏╋┛
#  ┇ ┛ ┇┇━┛┇ ┗
# Roosta <mail@roosta.sh>
# https://roosta.sh
# https://github.com/roosta/etc/tree/master/conf/tmux
# Options {{{
#------------

# set the default shell to whatever $SHELL contains
set -g default-shell   "${SHELL}"
set -g default-command "${SHELL}"

# source config file
bind R source-file ~/.tmux.conf \; display-message "Config reloading..."

# Set default terminal to tmux-256color inside tmux
set  -g default-terminal "tmux-256color"

# Tmux 24-bit color for termite terminal
# https://wiki.archlinux.org/index.php/Tmux#24-bit_color
set -ga terminal-overrides ",xterm-termite:Tc"

# undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# enable xterm keys for better support for ALT, CTRL, and SHIFT
setw -g xterm-keys on

# Attempt to set the client terminal title
set  -g set-titles on

# Enable mouse
set -g mouse on

# Index starts from 1
set -g base-index 1

# bell
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off

# listen for bells in inactive windows
set -g monitor-bell on
set -g bell-action other

# use vi keys
set -g mode-keys vi
set -g status-keys vi

# Wrap searching through scrollback buffer
set -g wrap-search on

# the time a status message is displayed in millisecs
set -g display-time 4000

# https://github.com/tmux-plugins/vim-tmux-focus-events
set -g focus-events on

# Send notification on bell.  How this works is that I sometimes start a
# process that takes a while to complete, open a new window and then promptly
# forget that I started the process that might require some input to complete
# Instead I now open a new window, set the option monitor silence and then get
# alerted when the process for whatever is halted
# Notify script:
# https://github.com/roosta/utils/blob/master/tmux-notify.sh 
# Example of a session that uses monitor-silence:
# https://github.com/roosta/utils/blob/master/tmux-update-window.sh
set-hook -g alert-silence 'run ". ~/utils/tmux-notify.sh; return 0"'

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# fix escape delay issue.
# https://stackoverflow.com/questions/12312178/tmux-and-vim-escape-key-being-seen-as-and-having-long-delay#13843382
set -s escape-time 0

# }}}
# Keybinds {{{
#--------------

# Set backtick as leader key
# in case backtick is needed, double tap backtick
unbind C-b
set -g prefix `
bind-key ` send-prefix

# For nested sessions use C-a to send prefix
bind-key -n C-a send-prefix

# keep hitting it by accident
# opens a new window
unbind c

# setup copy-mode
bind Space copy-mode
bind p paste-buffer

# start copy-mode and move up
bind Pageup copy-mode -u #-e

# bind -t vi-copy 'v' begin-selection
# bind -t vi-copy 'y' copy-selection
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'y' send -X copy-selection

# these cause issue with tmux-copycat plugin an
# bind -t vi-copy 'Space' halfpage-down
# bind -t vi-copy 'Bspace' halfpage-up

# leader d to detach from session
bind-key d detach

#bind-key 0 run "tmux split-window -l 12 'bash -ci ftpane'"

bind q kill-pane

# swap panes in a given direction
bind > swap-pane -U
bind < swap-pane -D

# cycle between various pane layouts
# bind } next-layout
# bind { previous-layout

# Events out pane sizes, useful if you've been temporarily resizing windows,
# and now want them back to equal width/height
bind = select-layout even-horizontal
bind + select-layout even-vertical

bind f1 select-layout even-horizontal
bind f2 select-layout even-vertical
bind f3 select-layout main-horizontal
bind f4 select-layout main-vertical
bind f5 select-layout tiled

# split panes, but don't docus
# -d keeps focus on original pane
# bind x split-window -v
# bind v split-window -h
bind - split-window -v
bind / split-window -h

# Start command prompt like in vim
bind : command-prompt

## moving between panes with vim movement keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# select-pane (@george-b)
# bind-key 0 run "tmux split-window -p 40 'bash -ci ftpane'"

## resize panes
bind -n M-C-h resize-pane -L 10
bind -n M-C-j resize-pane -D 10
bind -n M-C-k resize-pane -U 10
bind -n M-C-l resize-pane -R 10

# opens a new window
bind t new-window
# bind -n C-t new-window
# bind -n C-w kill-window

# go to next/prev window
bind [ prev
bind ] next

# Emacs history completion
# bind -n C-Up send-keys C-Up
# bind -n C-Down send-keys C-Down
# bind -n C-Enter send-keys display-message "asdasdasdasd"

# mirror browser tab behaviour
bind -n C-Pageup prev
bind -n C-Pagedown next
bind -n C-S-Pageup swap-window -d -t -1
bind -n C-S-Pagedown swap-window -d -t +1

# join a pane from another window into current window
bind-key J command-prompt -p "join pane from:"  "join-pane -s '%%'"

# Send current pane to [window name]
bind-key S command-prompt -p "send pane to:"  "join-pane -t '%%'"

# Quickly expand active pane, hitting M-Enter again will return it to its original size
bind -n M-Enter resize-pane -Z
unbind z

unbind x
set -g @copycat_search x

#}}}
# Theme: {{{
#----------------
# border color
set -g pane-border-style fg=white
set -g pane-active-border-style fg=magenta

# T will display user@host:~ and change accordingly as you connect to different hosts.
set -g set-titles-string "[#I:#W] #T"

# Status opts
set -g status-position top
set -g status-justify left
set -g status-bg colour236
set -g status-fg brightwhite
set -g status-interval 5

# Message
# set -g message-fg brightwhite
# set -g message-bg colour236

# Bell
setw -g window-status-bell-style fg=colour208
setw -g window-status-activity-style fg=colour208

# Window status
setw -g window-status-format "#[fg=brightblack]#[bg=colour238] #I #[bg=colour236] #W "
setw -g window-status-current-format "#[fg=brightwhite]#[bg=colour238] #I #[bg=colour236] #W "
setw -g window-status-separator ''
# setw -g window-status-current-attr bright

# Status left
setw -g status-left-length 24
setw -g status-left ''

# Status right
setw -g status-right-length 24
setw -g status-right "#[bg=colour236] #S #[bg=colour238 fg=brightwhite] #h "

# }}}
# Nested sessions: {{{
# WIP
# SOURCE: https://medium.freecodecamp.org/tmux-in-practice-local-and-nested-remote-tmux-sessions-4f7ba5db8795
# bind -T root F12  \
#   set prefix None \;\
#   set key-table off \;\
#   set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
#   set window-status-current-format "#[fg=brightblack] #I:#W#" \;\
#   if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
# refresh-client -S \;\

# bind -T off F12 \
#   set -u prefix \;\
#   set -u key-table \;\
#   set -u status-style \;\
#   set -u window-status-current-format \;\
# refresh-client -S

## }}}
# Plugins {{{
# -----------
set -g @tmux-pop-color 'colour236'
# set -g @srcery_tmux_patched_font '1'

# # Smart pane switching with awareness of vim splits
# # See: https://github.com/christoomey/vim-tmux-navigator
# The idea is to use C-h/j/k/l work with either tmux panes or vim splits.
# Use various methods to identify running commands and either switch pane or pass shortcut through with 'tmux send-keys'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff|pager)?$'"
is_emacs="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(emacs|emacsclient)$'"
is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(fzf)$'"
is_mutt="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(mutt|neomutt)$'"
is_browsh="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(browsh)$'"
is_utils="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(htop|vifm|ncmpcpp|fzf)$'"
bind-key -n C-h if-shell "$is_vim || $is_emacs" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim || $is_emacs || $is_fzf" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim || $is_emacs || $is_fzf" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim || $is_emacs || $is_browsh" "send-keys C-l"  "select-pane -R"
# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -n C-u if-shell "$is_vim || $is_emacs || $is_mutt || $is_utils" "send-keys C-u"  "copy-mode -u"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
# bind-key -T copy-mode-vi C-\ select-pane -l

## Tmux prefix highlight
## https://github.com/tmux-plugins/tmux-prefix-highlight
# set -g @prefix_highlight_fg 'black'
# set -g @prefix_highlight_bg 'blue'

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-copycat'
# set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'wfxr/tmux-fzf-url'
set -g @plugin 'roosta/tmux-pop'
# set -g @plugin 'srcery-colors/srcery-tmux'

run-shell ~/src/tmux-fzf-search/fzf-search.tmux

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

# }}}
# vim:ft=tmux:ts=2:sw=2:fdm=marker
