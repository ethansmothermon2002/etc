# ┌───────────────────────────────────┐
# │▀▀▀░░░░░░░▀█▀░▀▀█░█░█░█▄█░░░░░░░▀▀▀│
# │▀▀▀▀▀░░░░░░█░░░▀▄░█▄█░█░█░░░░░▀▀▀▀▀│
# │▀▀▀▀▀▀▀░░░▀▀▀░▀▀░░▀░▀░▀░▀░░░▀▀▀▀▀▀▀│
# │▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀│
# │ Author: Roosta <mail@roosta.sh>   │
# │ Site  : http://dotfiles.roosta.sh │
# │ Github: https://github.com/roosta │
# └────────┬──────────────────────────┘
# Sources: │
# ┌────────┘
# │ http://i3wm.org/docs/user-contributed/lzap-config.html
# │ http://dotshare.it (picked from various i3 confs, color schemes..etc)
# ┆
#

# ┐ ┬┬─┐┬─┐o┬─┐┬─┐┬  ┬─┐┐─┐
# │┌┘│─┤│┬┘││─┤│─││  ├─ └─┐
# └┘ ┘ ┆┆└┘┆┘ ┆┆─┘┆─┘┴─┘──┘
# -------------------------
# fast way to reach power settings for system. Requires polkit.
set $locker xscreensaver-command --lock

# tmux session management
# tmux new-session -n$USER -s$USER@$HOSTNAME
#set $term urxvtc -e bash -c "tmux -q has-session && exec tmux attach-session -d || exec tmux new-session"
#set $term urxvtc -e bash -c "tmux new-session"

# set terminal command.
set $term urxvtc

# set scrot/screenshot file arguments
set $screenshot "$HOME/Pictures/screenshots/screenshot_$(date +%Y-%m-%d@%H-%M-%S).png"

# generate new config with ansible and reload i3
set $fullrestart "ansible-playbook $HOME/.dotfiles/dotfiles.yml -t i3"
#set $fullreload "ansible-playbook $HOME/.dotfiles/dotfiles.yml -t i3 && i3-msg reload"

# ┬─┐┬ ┐┌┐┐┌─┐┐─┐┌┐┐┬─┐┬─┐┌┐┐
# │─┤│ │ │ │ │└─┐ │ │─┤│┬┘ │
# ┘ ┆┆─┘ ┆ ┘─┘──┘ ┆ ┘ ┆┆└┘ ┆
# --------------------------
exec $term
#exec --no-startup-id "i3-msg 'workspace 5S:Comms; append_layout ~/.i3/workspace/comms_ws.json'"

# ┌─┐┬─┐┌┐┐o┌─┐┌┐┐┐─┐
# │ ││─┘ │ ││ ││││└─┐
# ┘─┘┆   ┆ ┆┘─┘┆└┘──┘
# -------------------
# jump to previous workspace by hitting first ws button again
#workspace_auto_back_and_forth yes

# ┐ ┬┌─┐┬─┐┬┌ ┐─┐┬─┐┬─┐┌─┐┬─┐┐─┐
# ││││ ││┬┘├┴┐└─┐│─┘│─┤│  ├─ └─┐
# └┴┆┘─┘┆└┘┆ ┘──┘┆  ┘ ┆└─┘┴─┘──┘
# ------------------------------
# Numbers in front is for sorting order on i3bar.
# In each bar numbers are stripped. See bar config below.

# primary workspaces
set $PWS1_TRM "1Q:Term"
set $PWS2_DEV "2W:Devel"
set $PWS3_WWW "3E:Web"

bindsym $mod+q workspace $PWS1_TRM
bindsym $mod+w workspace $PWS2_DEV
bindsym $mod+e workspace $PWS3_WWW

bindsym $mod+Shift+q move workspace $PWS1_TRM
bindsym $mod+Shift+w move workspace $PWS2_DEV
bindsym $mod+Shift+e move workspace $PWS3_WWW

# secondary workspaces
set $SWS1_AUX "4A:Aux"
set $SWS2_COM "5S:Comms"
set $SWS3_DBG "6D:Debug"

bindsym $mod+a workspace $SWS1_AUX
bindsym $mod+s workspace $SWS2_COM
bindsym $mod+d workspace $SWS3_DBG

bindsym $mod+Shift+a move workspace $SWS1_AUX
bindsym $mod+Shift+s move workspace $SWS2_COM
bindsym $mod+Shift+d move workspace $SWS3_DBG

# Tertiary workspaces
set $TWS1_MED "7:1:Media"
set $TWS2_GAM "8:2:Games"
set $TWS3_MSC "9:3:Misc"

bindsym $mod+1 workspace $TWS1_MED
bindsym $mod+2 workspace $TWS2_GAM
bindsym $mod+3 workspace $TWS3_MSC

bindsym $mod+Shift+1 move workspace $TWS1_MED
bindsym $mod+Shift+2 move workspace $TWS2_GAM
bindsym $mod+Shift+3 move workspace $TWS3_MSC

# Auxiliary workspaces
set $FWS1 "9[F1]"
set $FWS2 "10[F2]"
set $FWS3 "11[F3]"
set $FWS4 "12[F4]"
set $FWS5 "13[F5]"
set $FWS6 "14[F6]"
set $FWS7 "15[F7]"
set $FWS8 "16[F8]"

bindsym $mod+F1 workspace $FWS1
bindsym $mod+F2 workspace $FWS2
bindsym $mod+F3 workspace $FWS3
bindsym $mod+F4 workspace $FWS4
bindsym $mod+F5 workspace $FWS5
bindsym $mod+F6 workspace $FWS6
bindsym $mod+F7 workspace $FWS7
bindsym $mod+F8 workspace $FWS8

bindsym $mod+Shift+F1 move workspace $FWS1
bindsym $mod+Shift+F2 move workspace $FWS2
bindsym $mod+Shift+F3 move workspace $FWS3
bindsym $mod+Shift+F4 move workspace $FWS4
bindsym $mod+Shift+F5 move workspace $FWS5
bindsym $mod+Shift+F6 move workspace $FWS6
bindsym $mod+Shift+F7 move workspace $FWS7
bindsym $mod+Shift+F8 move workspace $FWS8

## assign workspaces to outputs
# primary
workspace $PWS1_TRM output {{ outputs[0].display }}
workspace $PWS3_WWW output {{ outputs[0].display }}
workspace $PWS2_DEV output {{ outputs[0].display }}

# secondary
workspace $SWS1_AUX output {{ outputs[1].display }}
workspace $SWS3_DBG output {{ outputs[1].display }}
workspace $SWS2_COM output {{ outputs[1].display }}

# Options
focus_follows_mouse no
new_window pixel 1
hide_edge_borders none

# ┐ ┬o┌┐┐┬─┐┌─┐┐ ┬  ┬─┐┬ ┐┬  ┬─┐┐─┐
# ││││││││ ││ ││││  │┬┘│ ││  ├─ └─┐
# └┴┆┆┆└┘┆─┘┘─┘└┴┆  ┆└┘┆─┘┆─┘┴─┘──┘
# ---------------------------------
# WINDOW WORKSPACE ASSIGNMENT
# ---------------------------
# -> devel
assign [class="(?i)subl3"]                 $PWS2_DEV
assign [class="(?i)jetbrains-idea"]        $PWS2_DEV
assign [class="(?i)atom"]                  $PWS2_DEV

# -> debug
assign [class="(?i)google-chrome-beta$"]   $SWS3_DBG
assign [instance="^Devtools$$"]            $SWS3_DBG

# -> www
assign [class="(?i)firefox"]               $PWS3_WWW

# -> games
assign [class="(?i)steam"]                 $TWS2_GAM

# -> media
assign [class="(?i)spotify"]               $TWS1_MED
assign [class="(?i)google-chrome-stable"] $TWS1_MED

# -> Comms
assign [class="(?i)pidgin"]                $SWS2_COM
assign [class="(?i)linphone"]              $SWS2_COM
assign [class="(?i)scudcloud"]             $SWS2_COM
assign [class="(?i)thunderbird"]           $SWS2_COM

# WINDOW BEHAVIOUR
# ----------------
# create some rules to force floating on certain roles/classes
for_window [window_role="pop-up"]                floating enable
for_window [window_role="task_dialog"]           floating enable
for_window [window_role="bubble"]                floating enable
for_window [title="Preferences$"]                floating enable
for_window [window_role="Preferences"]           floating enable
for_window [title="Preferences$"]                floating enable

# application spesific
for_window [class="(?i)Jitsi"]                   floating enable
for_window [class="(?i)SessionManager"]          floating enable
for_window [title="(?i)Friends"]                 floating enable
for_window [class="(?i)Linphone"]                floating enable
for_window [title="(?i)Steam#-#Update#News(.*)"] floating enable
for_window [class="(?i)Pidgin"]                  floating enable

# WINDOW SIZE
# -----------
for_window [class="(?i)Pidgin"]                  floating_maximum_size 50 x 75

# BORDER
# ------
#for_window [class="(?i)firefox"]               border none
for_window [class="(?i)google-chrome$"]         border none
for_window [class="(?i)PrisonArchitect.x86_64"] border none

# ┬┌ ┬─┐┐ ┬┬─┐o┌┐┐┬─┐┐─┐
# ├┴┐├─ └┌┘│─││││││ │└─┐
# ┆ ┘┴─┘ ┆ ┆─┘┆┆└┘┆─┘──┘

# set modkey (Super key)
set $mod Mod4

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

bindsym $mod+Return exec $term
#bindsym $mod+Shift+Return exec $tmux_new

# kill focused window
bindsym $mod+c kill

bindsym $mod+Tab exec --no-startup-id rofi -show run
bindsym $mod+grave exec --no-startup-id rofi -show window

# focus vi bindings
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# focus cursor key bindings
bindsym $mod+Left  focus left
bindsym $mod+Down  focus down
bindsym $mod+Up    focus up
bindsym $mod+Right focus right

bindsym $mod+Shift+Left  move left
bindsym $mod+Shift+Down  move down
bindsym $mod+Shift+Up    move up
bindsym $mod+Shift+Right move right

# choose split direction.
bindsym $mod+v split h
bindsym $mod+x split v

# window layout controls
bindsym $mod+Control+Shift+t layout stacked
bindsym $mod+Shift+t layout toggle
bindsym $mod+t layout tabbed
bindsym $mod+f fullscreen toggle

# toggle
bindsym $mod+Shift+space floating toggle
bindsym $mod+space focus mode_toggle

# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# regenerate configuration from template and restart i3
bindsym $mod+Control+Shift+r exec --no-startup-id $fullrestart

# reload i3 configuration
bindsym $mod+Shift+c reload

# regenerate i3 config and reload
#bindsym $mod+Control+Shift+c exec --no-startup-id $fullreload

# border changing
bindsym $mod+b border toggle

# scratchpad
bindsym $mod+m move scratchpad
bindsym $mod+o scratchpad show

# toggle touchpad
bindsym $mod+Shift+o exec --no-startup-id ~/bin/touchpad-toggle

# move to last workspace
bindsym $mod+z workspace back_and_forth

# move windows back and forth
bindsym $mod+Shift+z move container to workspace back_and_forth

bindsym $mod+Control+Shift+left move container to output left
bindsym $mod+Control+Shift+right move container to output right

bindsym $mod+p focus parent
bindsym $mod+Shift+p focus child

# screenshot
# source: https://github.com/Airblader/dotfiles-manjaro
bindsym --release Print exec scrot $screenshot
bindsym --release Shift+Print exec scrot -s $screenshot

# send a signal to i3blocks on caps to toggle layout
bindsym --release Caps_Lock exec pkill -SIGRTMIN+11 i3blocks

# send signal to i3blocks on volume change and update volume script.
# currently unoprable since xbindkeys hijacks these keys for reasons I haven't looked into
#bindsym 123 exec pkill -SIGRTMIN+12 i3blocks
#bindsym 122 exec pkill -SIGRTMIN+12 i3blocks
#bindsym 121 exec pkill -SIGRTMIN+12 i3blocks

# ┌┌┐┬─┐┌┐┐┬ ┐┐─┐
# │││├─ ││││ │└─┐
# ┘ ┆┴─┘┆└┘┆─┘──┘
# ---------------

# RESIZE
# resize windows with either vi keys or arrows.
# shift+movement shrink or grow with larger increments
set $mode_resize Resize: (directions) 10px, (Shift+directions) 30px
mode "$mode_resize" {
  # vi movement
  bindsym h resize shrink width  10 px or 10 ppt
  bindsym j resize grow   height 10 px or 10 ppt
  bindsym k resize shrink height 10 px or 10 ppt
  bindsym l resize grow   width  10 px or 10 ppt

  bindsym Shift+h resize shrink width  30 px or 30 ppt
  bindsym Shift+j resize grow   height 30 px or 30 ppt
  bindsym Shift+k resize shrink height 30 px or 30 ppt
  bindsym Shift+l resize grow   width  30 px or 30 ppt

  # assign the same for arrows
  bindsym Left resize shrink width  10 px or 10 ppt
  bindsym Down resize grow   height 10 px or 10 ppt
  bindsym Up resize shrink   height 10 px or 10 ppt
  bindsym Right resize grow  width  10 px or 10 ppt

  bindsym Shift+Left resize shrink width  30 px or 30 ppt
  bindsym Shift+Down resize grow   height 30 px or 30 ppt
  bindsym Shift+Up resize shrink   height 30 px or 30 ppt
  bindsym Shift+Right resize grow  width  30 px or 30 ppt

  # back to normal: Enter or Escape
  bindsym Return mode "default"
  bindsym Escape mode "default"
}
bindsym $mod+r mode "$mode_resize"

# SYSTEM
# https://wiki.archlinux.org/index.php/I3#Shutdown.2C_reboot.2C_lock_screen
#set $locker i3lock --image=$HOME/.backgrounds/pattern-01.png -t && sleep 1
set $mode_system System: (l) lock, (e) logout, (s) suspend, (r) reboot, (Shift+s) shutdown
mode "$mode_system" {
  bindsym l       exec --no-startup-id $locker, mode "default"
  bindsym e       exec --no-startup-id i3-msg exit, mode "default"
  bindsym s       exec --no-startup-id $locker && systemctl suspend, mode "default"
  bindsym r       exec --no-startup-id systemctl reboot, mode "default"
  bindsym Shift+s exec --no-startup-id systemctl poweroff -i, mode "default"

  # back to normal: Enter or Escape
  bindsym Return mode "default"
  bindsym Escape mode "default"
}
# bind FN sleep key to menu
bindsym XF86Sleep mode "$mode_system"
bindsym $mod+End mode "$mode_system"

# OUTPUT
# Quickly switch output based on presets
# Script is in the submodule "scripts". Alternativly http://github.com/roosta/scripts
set $changeto ~/bin/chmon
set $mode_chmon Layout: (d) desk, (t) TV, (a) all
mode "$mode_chmon" {
  bindsym d exec --no-startup-id $changeto desk, mode "default"
  bindsym t exec --no-startup-id $changeto tv, mode "default"
  bindsym a exec --no-startup-id $changeto all, mode "default"

  # back to normal: Enter or Escape
  bindsym Return mode "default"
  bindsym Escape mode "default"
}
# bind FN home key to menu
bindsym XF86HomePage mode "$mode_chmon"
bindsym $mod+Home mode "$mode_chmon"

# ┬─┐┬─┐┬─┐┬─┐┬─┐┬─┐┬─┐┌┐┐┌─┐┬─┐
# │─┤│─┘│─┘├─ │─┤│┬┘│─┤││││  ├─
# ┘ ┆┆  ┆  ┴─┘┘ ┆┆└┘┘ ┆┆└┘└─┘┴─┘
# ------------------------------

# generated from template
# set primary font
font {{ i3_font }}

# <class> <border> <background> <foreground> <indicator>
client.focused          {{ neutral_blue }} {{ neutral_blue }} {{ dark0 }} {{ neutral_aqua }}
client.focused_inactive {{ dark1 }} {{ dark0 }} {{ light1 }} {{ dark0_soft }}
client.unfocused        {{ neutral_blue }} {{ dark1 }} {{ gray_245 }} {{ neutral_aqua }}
client.urgent           {{ neutral_orange }} {{ neutral_orange }} {{ dark0 }} {{ neutral_orange }}
client.placeholder      {{ bright_aqua }} {{ neutral_aqua }} {{ dark0 }} {{ bright_purple }}

{# macro that renders status bars based on host spesific variables as args #}
{% macro render_bar(display, bar_id, stat_conf, bar_pos, tray_out) %}
bar {
  id {{ bar_id }}
  output {{ display }}
  status_command {{ i3_status_command }} {{ stat_conf }}
  font {{ i3_status_font }}
  position {{ bar_pos }}
  tray_output {{ tray_out }}
  strip_workspace_numbers yes
  separator_symbol "|"
  colors {
    background {{ dark0 }}
    separator  {{ dark0_soft }}
    statusline {{ light1 }}

    # <workclass> <border> <background> <foreground>
    focused_workspace  {{ dark0_hard }} {{ dark1 }} {{ neutral_blue }}
    active_workspace   {{ dark1 }} {{ dark0_soft }} {{ light1 }}
    inactive_workspace {{ dark0_hard }} {{ dark1 }} {{ gray_245 }}
    urgent_workspace   {{ neutral_orange }} {{ neutral_orange }} {{ dark0 }}
  }
}
{% endmacro %}

{# loop through each output and generate a bar config for each #}
{% for output in outputs %}
{{ render_bar(output.display, output.bar_id, output.stat_conf, output.bar_pos, output.tray_out) }}
{% endfor %}

# vim:ft=i3:ts=2:sw=2:fdm=marker
